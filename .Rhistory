asthmaData$OutdoorActivities = as.integer(asthmaData$OutdoorActivities)
# Since smoking was binary, yes = 1 and no = 0
asthmaData$SmokingHabit[asthmaData$SmokingHabit == "Yes"] = 1
asthmaData$SmokingHabit[asthmaData$SmokingHabit == "No"] = 0
asthmaData$SmokingHabit = as.integer(asthmaData$SmokingHabit)
# UV Index, binary
asthmaData$UVIndex[asthmaData$UVIndex == 'Extreme'] = 1
asthmaData$UVIndex[asthmaData$UVIndex == 'Low'] = 0
asthmaData$UVIndex = as.integer(asthmaData$UVIndex)
library(corrplot)
cor = cor(asthmaData, method = c("pearson", "kendall", "spearman"))
summary(asthmaData)
library(corrplot)
cor = cor(asthmaData[-asthmaData$Location], method = c("pearson", "kendall", "spearman"))
library(corrplot)
cor = cor(asthmaData[,-asthmaData$Location], method = c("pearson", "kendall", "spearman"))
library(corrplot)
cor = cor(asthmaData[,-2], method = c("pearson", "kendall", "spearman"))
corrplot(cor, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
heatmap(cor, sym = TRUE)
head(asthmaData$Location)
### Converting all strings to integers ###
## Can access a certain column either by a their name or column number
#asthmaData['ACTScore']
#asthmaData[14]
#asthmaData$SmokingHabit
###################################################################
## Location
asthmaData$Location[asthmaData$Location == 'Petaling'] = as.numeric(0)
asthmaData$Location[asthmaData$Location == 'Kampong Baharu Balakong'] = 1
asthmaData$Location[asthmaData$Location == 'Putrajaya'] = 2
asthmaData$Location[asthmaData$Location == 'Kota Bharu'] = 3
asthmaData$Location[asthmaData$Location == 'Kuala Lampur'] = 4
asthmaData$Location[asthmaData$Location == 'Cyberjaya'] = 5
## Changing age
asthmaData$Age[asthmaData$Age == 'Above 50'] = 4
asthmaData$Age[asthmaData$Age == '41-50'] = 3
asthmaData$Age[asthmaData$Age == '31-40'] = 2
asthmaData$Age[asthmaData$Age == '19-30'] = 1
## The above transformation still kept elements as char so 'as.integer' converts the char to int
asthmaData$Age = as.integer(asthmaData$Age)
# Gender,  binary, yes = 1 and no = 0
## DOES IT MATTER IF WE CHOOSE 0 AND 1 or -1 AND 1 ??????????????????????
asthmaData$Gender[asthmaData$Gender == 'Female'] = 1
asthmaData$Gender[asthmaData$Gender == 'Male'] = 0
asthmaData$Gender = as.integer(asthmaData$Gender)
# changing outdoor job
asthmaData$OutdoorJob[asthmaData$OutdoorJob == 'Frequently'] = 3
asthmaData$OutdoorJob[asthmaData$OutdoorJob == 'Occasionally'] = 2
asthmaData$OutdoorJob[asthmaData$OutdoorJob == 'Rarely'] = 1
asthmaData$OutdoorJob = as.integer(asthmaData$OutdoorJob)
# Outdoor activity
asthmaData$OutdoorActivities[asthmaData$OutdoorActivities == 'Extremely likely'] = 3
asthmaData$OutdoorActivities[asthmaData$OutdoorActivities == 'Neither likely or dislikely'] = 2
asthmaData$OutdoorActivities[asthmaData$OutdoorActivities == 'Not at all likely'] = 1
asthmaData$OutdoorActivities = as.integer(asthmaData$OutdoorActivities)
# Since smoking was binary, yes = 1 and no = 0
asthmaData$SmokingHabit[asthmaData$SmokingHabit == "Yes"] = 1
asthmaData$SmokingHabit[asthmaData$SmokingHabit == "No"] = 0
asthmaData$SmokingHabit = as.integer(asthmaData$SmokingHabit)
# UV Index, binary
asthmaData$UVIndex[asthmaData$UVIndex == 'Extreme'] = 1
asthmaData$UVIndex[asthmaData$UVIndex == 'Low'] = 0
asthmaData$UVIndex = as.integer(asthmaData$UVIndex)
### Converting all strings to integers ###
## Can access a certain column either by a their name or column number
#asthmaData['ACTScore']
#asthmaData[14]
#asthmaData$SmokingHabit
###################################################################
## Location
asthmaData$Location[asthmaData$Location == 'Petaling'] = as.numeric(0)
asthmaData$Location[asthmaData$Location == 'Kampong Baharu Balakong'] = as.numeric(1)
asthmaData$Location[asthmaData$Location == 'Putrajaya'] = as.numeric(2)
asthmaData$Location[asthmaData$Location == 'Kota Bharu'] = as.numeric(3)
asthmaData$Location[asthmaData$Location == 'Kuala Lampur'] = as.numeric(4)
asthmaData$Location[asthmaData$Location == 'Cyberjaya'] = as.numeric(5)
## Changing age
asthmaData$Age[asthmaData$Age == 'Above 50'] = 4
asthmaData$Age[asthmaData$Age == '41-50'] = 3
asthmaData$Age[asthmaData$Age == '31-40'] = 2
asthmaData$Age[asthmaData$Age == '19-30'] = 1
## The above transformation still kept elements as char so 'as.integer' converts the char to int
asthmaData$Age = as.integer(asthmaData$Age)
# Gender,  binary, yes = 1 and no = 0
## DOES IT MATTER IF WE CHOOSE 0 AND 1 or -1 AND 1 ??????????????????????
asthmaData$Gender[asthmaData$Gender == 'Female'] = 1
asthmaData$Gender[asthmaData$Gender == 'Male'] = 0
asthmaData$Gender = as.integer(asthmaData$Gender)
# changing outdoor job
asthmaData$OutdoorJob[asthmaData$OutdoorJob == 'Frequently'] = 3
asthmaData$OutdoorJob[asthmaData$OutdoorJob == 'Occasionally'] = 2
asthmaData$OutdoorJob[asthmaData$OutdoorJob == 'Rarely'] = 1
asthmaData$OutdoorJob = as.integer(asthmaData$OutdoorJob)
# Outdoor activity
asthmaData$OutdoorActivities[asthmaData$OutdoorActivities == 'Extremely likely'] = 3
asthmaData$OutdoorActivities[asthmaData$OutdoorActivities == 'Neither likely or dislikely'] = 2
asthmaData$OutdoorActivities[asthmaData$OutdoorActivities == 'Not at all likely'] = 1
asthmaData$OutdoorActivities = as.integer(asthmaData$OutdoorActivities)
# Since smoking was binary, yes = 1 and no = 0
asthmaData$SmokingHabit[asthmaData$SmokingHabit == "Yes"] = 1
asthmaData$SmokingHabit[asthmaData$SmokingHabit == "No"] = 0
asthmaData$SmokingHabit = as.integer(asthmaData$SmokingHabit)
# UV Index, binary
asthmaData$UVIndex[asthmaData$UVIndex == 'Extreme'] = 1
asthmaData$UVIndex[asthmaData$UVIndex == 'Low'] = 0
asthmaData$UVIndex = as.integer(asthmaData$UVIndex)
head(asthmaData$Location)
library(corrplot)
cor = cor(asthmaData, method = c("pearson", "kendall", "spearman"))
summary(asthmaData$Location)
asthmaData$Location = as.numeric(asthmaData$Location)
summary(asthmaData$Location)
library(corrplot)
cor = cor(asthmaData, method = c("pearson", "kendall", "spearman"))
corrplot(cor, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
heatmap(cor, sym = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(caret)
library(car)
library(olsrr)
library(lme4)
# Importing the data set and printing the first 6 rows to see what it looks like
asthmaDataOriginal= read.csv("Asthma_Data_File.csv")
# Removing id number for each subject
asthmaData = data.frame(asthmaDataOriginal[,-2])
head(asthmaData)
dim(asthmaDataOriginal)
# Summary gives a description for each input and output, giving you a sense of what the data looks like
summary(asthmaData)
dim(asthmaData)
# Only want  to factor the categories so removing the columns listed below.
# These are: subject, temp, humidity, windspeed and ACTScore.
names = names(asthmaData[,c(-1,-8,-10,-12,-13)])
asthmaData[,names] = lapply(asthmaData[,names], factor)
str(asthmaData)
# Only want  to factor the categories so removing the columns listed below.
# These are: subject, temp, humidity, windspeed and ACTScore.
names = names(asthmaData[,c(-1,-8,-10,-12,-13)])
asthmaData[,names] = lapply(asthmaData[,names], factor)
str(asthmaData)
match.fun
# Only want  to factor the categories so removing the columns listed below.
# These are: subject, temp, humidity, windspeed and ACTScore.
names = names(asthmaData[,c(-1,-8,-10,-12,-13)])
asthmaData[,names] = lapply(asthmaData[,names], factor)
str(asthmaData)
head(asthmaData$Location)
# Only want  to factor the categories so removing the columns listed below.
# These are: subject, temp, humidity, windspeed and ACTScore.
names = names(asthmaData[,c(-1,-8,-10,-12,-13)])
asthmaData[,names] = lapply(asthmaData[,names], factor)
str(asthmaData)
contrasts(asthmaData$Location)
subj1 = asthmaData[asthmaData$UserNo. == 1,]
subj2 = asthmaData[asthmaData$UserNo. == 2,]
subj3 = asthmaData[asthmaData$UserNo. == 3,]
subj4 = asthmaData[asthmaData$UserNo. == 4,]
subj5 = asthmaData[asthmaData$UserNo. == 5,]
subj6 = asthmaData[asthmaData$UserNo. == 6,]
subj7 = asthmaData[asthmaData$UserNo. == 7,]
subj8 = asthmaData[asthmaData$UserNo. == 8,]
subj9 = asthmaData[asthmaData$UserNo. == 9,]
subj10 = asthmaData[asthmaData$UserNo. == 10,]
sprintf('Number of Instances per Subject')
sprintf('Subject 1: %f',dim(subj1)[1])
sprintf('Subject 2: %f',dim(subj2)[1])
sprintf('Subject 3: %f',dim(subj3)[1])
sprintf('Subject 4: %f',dim(subj4)[1])
sprintf('Subject 5: %f',dim(subj5)[1])
sprintf('Subject 6: %f',dim(subj6)[1])
sprintf('Subject 7: %f',dim(subj7)[1])
sprintf('Subject 8: %f',dim(subj8)[1])
sprintf('Subject 9: %f',dim(subj9)[1])
sprintf('Subject 10: %f',dim(subj10)[1])
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(caret)
library(car)
library(olsrr)
library(lme4)
library(shiny)
# Importing the data set and printing the first 6 rows to see what it looks like
asthmaDataOriginal= read.csv("Asthma_Data_File.csv")
# Removing id number for each subject
asthmaData = data.frame(asthmaDataOriginal[,-2])
head(asthmaData)
dim(asthmaDataOriginal)
# Summary gives a description for each input and output, giving you a sense of what the data looks like
summary(asthmaData)
dim(asthmaData)
# Only want  to factor the categories so removing the columns listed below.
# These are: subject, temp, humidity, windspeed and ACTScore.
names = names(asthmaData[,c(-1,-8,-10,-12,-13)])
asthmaData[,names] = lapply(asthmaData[,names], factor)
str(asthmaData)
contrasts(asthmaData$Location)
head(asthmaData$OutdoorJob)
barplot(prop.table(table(asthmaData$Age)), main = 'Age')
barplot(prop.table(table(asthmaData$Gender)), main = 'Gender')
barplot(prop.table(table(asthmaData$OutdoorJob)), main = 'Out Door Job')
barplot(prop.table(table(asthmaData$OutdoorActivities)), main = 'Out Door Activities')
barplot(prop.table(table(asthmaData$SmokingHabit)), main = 'Smoking Habit')
barplot(prop.table(table(asthmaData$Pressure)), main = 'Pressure')
barplot(prop.table(table(asthmaData$UVIndex)), main = 'UV Index')
hist(asthmaData$Humidity, breaks = 25, main = 'Humidity')
hist(asthmaData$Temperature, breaks = 25, main = 'temp')
hist(asthmaData$WindSpeed, breaks = 25, main = 'wind')
hist(asthmaData$ACTScore,breaks = 25, main = 'ACT score')
table(asthmaData$Age)
table(asthmaData$Gender)
table(asthmaData$OutdoorJob)
table(asthmaData$OutdoorActivities)
table(asthmaData$SmokingHabit)
table(asthmaData$Pressure)
table(asthmaData$UVIndex)
table(asthmaData$ACTScore)
## NEED TO USE PACKAGE car for this to work because of the upper case B
# This box and whisker plot created the boxplot and also labels the points that are
# 1.5 times outside the IQR, I then take those points, convert them from chr to
# numberic and store it as an outlier. I think take the union of all the outlires
# to keep track of when looking at other inputs that are continuous.
# Source for this: http://www.unige.ch/ses/sococ/cl/r/bapr.e.html
outlier_ageH = as.numeric(Boxplot(asthmaData$Humidity~asthmaData$Age,data=asthmaData, xlab = 'Age Category', ylab = 'Humidity (%)'))
outlier_genderH = as.numeric(Boxplot(asthmaData$Humidity~asthmaData$Gender,data=asthmaData))
outlier_smH = as.numeric(Boxplot(asthmaData$Humidity~asthmaData$SmokingHabit,data=asthmaData))
outlier_ODJH = as.numeric(Boxplot(asthmaData$Humidity~asthmaData$OutdoorJob,data=asthmaData))
outlier_ODAH = as.numeric(Boxplot(asthmaData$Humidity~asthmaData$OutdoorActivities,data=asthmaData))
outlier_pH = as.numeric(Boxplot(asthmaData$Humidity~asthmaData$Pressure,data=asthmaData))
outlier_UVH = as.numeric(Boxplot(asthmaData$Humidity~asthmaData$UVIndex,data=asthmaData))
# The last part combines all the outlier indices found as a vector and keeps all
# number once, so say 114 is stored twice then the unique() will just take one
# of them out
totOutlier_H = c(outlier_ageH, outlier_genderH, outlier_smH, outlier_ODJH, outlier_ODAH,outlier_pH, outlier_UVH)
table(totOutlier_H)
## NEED TO USE PACKAGE car for this to work because of the upper case B
# This box and whisker plot created the boxplot and also labels the points that are
# 1.5 times outside the IQR, I then take those points, convert them from chr to
# numberic and store it as an outlier. I think take the union of all the outliers
# to keep track of when looking at other inputs that are continuous.
outlier_ageT = as.numeric(Boxplot(asthmaData$Temperature ~asthmaData$Age,data=asthmaData))
outlier_genderT = as.numeric(Boxplot(asthmaData$Temperature ~asthmaData$Gender,data=asthmaData))
outlier_smT = as.numeric(Boxplot(asthmaData$Temperature~asthmaData$SmokingHabit,data=asthmaData))
outlier_ODJT = as.numeric(Boxplot(asthmaData$Temperature~asthmaData$OutdoorJob,data=asthmaData))
outlier_ODAT = as.numeric(Boxplot(asthmaData$Temperature~asthmaData$OutdoorActivities,data=asthmaData))
outlier_pT = as.numeric(Boxplot(asthmaData$Temperature~asthmaData$Pressure,data=asthmaData))
outlier_UVT = as.numeric(Boxplot(asthmaData$Temperature~asthmaData$UVIndex,data=asthmaData))
# The last part combines all the outlier indices found as a vector and keeps all
# number once, so say 114 is stored twice then the unique() will just take one
# of them out
totOutlier_T= c(outlier_ageT, outlier_genderT, outlier_smT, outlier_ODJT, outlier_ODAT,outlier_pT, outlier_UVT)
table(totOutlier_T)
# This box and whisker plot created the boxplot and also labels the points that are
# 1.5 times outside the IQR, I then take those points, convert them from chr to
# numberic and store it as an outlier. I think take the union of all the outliers
# to keep track of when looking at other inputs that are continuous.
outlier_ageW = as.numeric(Boxplot(asthmaData$WindSpeed ~asthmaData$Age,data=asthmaData))
#length(asthmaData$Age[outlier_ageW])/length(asthmaData$Age[asthmaData$Age == 4])
outlier_genderW = as.numeric(Boxplot(asthmaData$WindSpeed ~asthmaData$Gender,data=asthmaData))
#length(asthmaData$Gender[outlier_genderW])/length(asthmaData$Gender[asthmaData$Gender == 0])
outlier_smW = as.numeric(Boxplot(asthmaData$WindSpeed~asthmaData$SmokingHabit,data=asthmaData))
outlier_ODJW = as.numeric(Boxplot(asthmaData$WindSpeed~asthmaData$OutdoorJob,data=asthmaData))
outlier_ODAW = as.numeric(Boxplot(asthmaData$WindSpeed~asthmaData$OutdoorActivities,data=asthmaData))
outlier_pW = as.numeric(Boxplot(asthmaData$WindSpeed~asthmaData$Pressure,data=asthmaData))
outlier_UVW = as.numeric(Boxplot(asthmaData$WindSpeed~asthmaData$UVIndex,data=asthmaData))
# The last part combines all the outlier indices found as a vector and keeps all
# number once, so say 114 is stored twice then the unique() will just take one
# of them out
totOutlier_W = c(outlier_ageW, outlier_genderW, outlier_smW, outlier_ODJW, outlier_ODAW,outlier_pW, outlier_UVW)
table(totOutlier_W)
totOutliers = c(totOutlier_H, totOutlier_T, totOutlier_W)
#length(totOutliers)
#table(totOutliers)
#table(totOutliers) > 1
#which(table(totOutliers) > 1)
repOutliers = which(table(totOutliers) > 1) #Gives the indices for the the ones that show up more than once.
# This ensures that if we run the code again it will not take more
# Data out, just noticed it was going down when this was not added
if(dim(asthmaData)[1] == dim(asthmaDataOriginal)[1]){
asthmaData= asthmaData[-c(repOutliers),]
}
# Visual help that outliers are only removed once
dim(asthmaData)
length(repOutliers)
length(unique(totOutliers))
# Age group aboce 50 lost 23 instances, not sig. for the group
# Males also lost 23 instances
# ODJ: Occationally lost 23 instances
# Extremely likely : lost 23 instances
# No smoking lost 23 instances
# Pressure 1007 lost 6 instances, 1008 lost 4,  1009 lost 2, 1010 lost 5
#            1011 lost 4, 1012 and 1013 lost 1 each (totalign 23 instances)
#UVindex: extreme lost 2 and the low lost 21.
## All in all, no group was lost or severly minimized during this process
table(asthmaData$Age)
table(asthmaData$Gender)
table(asthmaData$OutdoorJob)
table(asthmaData$OutdoorActivities)
table(asthmaData$SmokingHabit)
table(asthmaData$Pressure)
table(asthmaData$UVIndex)
table(asthmaData$ACTScore)
## standard normalize of continuous variable for mixture model.
asthmaData$Humidity = scale(asthmaData$Humidity, scale = TRUE)
asthmaData$Temperature = scale(asthmaData$Temperature, scale = TRUE)
asthmaData$WindSpeed = scale(asthmaData$WindSpeed, scale = TRUE)
subj1 = asthmaData[asthmaData$UserNo. == 1,]
subj2 = asthmaData[asthmaData$UserNo. == 2,]
subj3 = asthmaData[asthmaData$UserNo. == 3,]
subj4 = asthmaData[asthmaData$UserNo. == 4,]
subj5 = asthmaData[asthmaData$UserNo. == 5,]
subj6 = asthmaData[asthmaData$UserNo. == 6,]
subj7 = asthmaData[asthmaData$UserNo. == 7,]
subj8 = asthmaData[asthmaData$UserNo. == 8,]
subj9 = asthmaData[asthmaData$UserNo. == 9,]
subj10 = asthmaData[asthmaData$UserNo. == 10,]
sprintf('Number of Instances per Subject')
sprintf('Subject 1: %f',dim(subj1)[1])
sprintf('Subject 2: %f',dim(subj2)[1])
sprintf('Subject 3: %f',dim(subj3)[1])
sprintf('Subject 4: %f',dim(subj4)[1])
sprintf('Subject 5: %f',dim(subj5)[1])
sprintf('Subject 6: %f',dim(subj6)[1])
sprintf('Subject 7: %f',dim(subj7)[1])
sprintf('Subject 8: %f',dim(subj8)[1])
sprintf('Subject 9: %f',dim(subj9)[1])
sprintf('Subject 10: %f',dim(subj10)[1])
plot(subj1$Temperature,subj1$ACTScore)
plot(subj2$Temperature,subj2$ACTScore)
plot(subj3$Temperature,subj3$ACTScore)
plot(subj4$Temperature,subj4$ACTScore)
plot(subj5$Temperature,subj5$ACTScore)
plot(subj6$Temperature,subj6$ACTScore)
plot(subj7$Temperature,subj7$ACTScore)
plot(subj8$Temperature,subj8$ACTScore)
plot(subj9$Temperature,subj9$ACTScore)
plot(subj10$Temperature,subj10$ACTScore)
plot(subj1$Humidity,subj1$ACTScore)
plot(subj2$Humidity,subj2$ACTScore)
plot(subj3$Humidity,subj3$ACTScore)
plot(subj4$Humidity,subj4$ACTScore)
plot(subj5$Humidity,subj5$ACTScore)
plot(subj6$Humidity,subj6$ACTScore)
plot(subj7$Humidity,subj7$ACTScore)
plot(subj8$Humidity,subj8$ACTScore)
plot(subj9$Humidity,subj9$ACTScore)
plot(subj10$Humidity,subj10$ACTScore)
plot(subj1$WindSpeed,subj1$ACTScore)
plot(subj2$WindSpeed,subj2$ACTScore)
plot(subj3$WindSpeed,subj3$ACTScore)
plot(subj4$WindSpeed,subj4$ACTScore)
plot(subj5$WindSpeed,subj5$ACTScore)
plot(subj6$WindSpeed,subj6$ACTScore)
plot(subj7$WindSpeed,subj7$ACTScore)
plot(subj8$WindSpeed,subj8$ACTScore)
plot(subj9$WindSpeed,subj9$ACTScore)
plot(subj10$WindSpeed,subj10$ACTScore)
set.seed(244224)
splits = group_vfold_cv(asthmaData, group = 'UserNo.', v = 10)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(caret)
library(car)
library(olsrr)
library(lme4)
library(shiny)
install.packages("rsample")
library(rsample)
set.seed(244224)
splits = group_vfold_cv(asthmaData, group = 'UserNo.', v = 10)
caret_splits = rsample2caret(splits)
names(caret_splits)
tc_grouped = trainControl(method = 'cv', number = 10, savePredictions = TRUE,
index = caret_splits$index, indexOut = caret_splits$indexOut)
all_x = asthmaData %>%
select(-UserNo., -ACTScore) %>%
as.data.frame()
all_y = asthmaData %>%
pull(ACTScore)
#m_grouped = train(x = all_x, y = all_y, method = 'mixed'
set.seed(244224)
splits = group_vfold_cv(asthmaData, group = 'UserNo.', v = 10)
caret_splits = rsample2caret(splits)
names(caret_splits)
head(caret_splits)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(caret)
library(car)
library(olsrr)
library(lme4)
library(shiny)
install.packages(c("boot", "car", "caret", "tidyverse",  "effects", "foreign",
"Hmisc", "DT", "knitr", "lme4", "MASS", "mlogit", "msm",
"QuantPsyc", "reshape2", "rms", "sandwich", "sfsmisc", "sjPlot",
"vcd", "visreg", "MuMIn", "lmerTest"))
install.packages(c("boot", "car", "caret", "tidyverse", "effects", "foreign", "Hmisc", "DT", "knitr", "lme4", "MASS", "mlogit", "msm", "QuantPsyc", "reshape2", "rms", "sandwich", "sfsmisc", "sjPlot", "vcd", "visreg", "MuMIn", "lmerTest"))
install.packages("cvms")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(caret)
library(car)
library(olsrr)
library(lme4)
library(shiny)
library(cvms)
#install.packages(c("boot", "car", "caret", "tidyverse",  "effects", "foreign",
#"Hmisc", "DT", "knitr", "lme4", "MASS", "mlogit", "msm",
#"QuantPsyc", "reshape2", "rms", "sandwich", "sfsmisc", "sjPlot",
#"vcd", "visreg", "MuMIn", "lmerTest"))
dataFold = fold(data = asthmaData, k = 7, cat_col = 'ACTscore', id_col = 'UserNo.') %>%
arrange(.folds)
install.packages("groupdata2")
library(groupdata2)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(caret)
library(car)
library(olsrr)
library(lme4)
library(shiny)
library(cvms)
library(groupdata2)
#install.packages(c("boot", "car", "caret", "tidyverse",  "effects", "foreign",
#"Hmisc", "DT", "knitr", "lme4", "MASS", "mlogit", "msm",
#"QuantPsyc", "reshape2", "rms", "sandwich", "sfsmisc", "sjPlot",
#"vcd", "visreg", "MuMIn", "lmerTest"))
dataFold = fold(data = asthmaData, k = 7, cat_col = 'ACTscore', id_col = 'UserNo.') %>%
arrange(.folds)
dataFold = fold(data = asthmaData, k = 7, cat_col = 'ACTScore', id_col = 'UserNo.') %>%
arrange(.folds)
dataFold = fold(data = asthmaData, k = 7, id_col = 'UserNo.') %>%
arrange(.folds)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(caret)
library(car)
library(olsrr)
library(lme4)
library(shiny)
library(cvms)
library(groupdata2)
#install.packages(c("boot", "car", "caret", "tidyverse",  "effects", "foreign",
#"Hmisc", "DT", "knitr", "lme4", "MASS", "mlogit", "msm",
#"QuantPsyc", "reshape2", "rms", "sandwich", "sfsmisc", "sjPlot",
#"vcd", "visreg", "MuMIn", "lmerTest"))
# Importing the data set and printing the first 6 rows to see what it looks like
asthmaDataOriginal= read.csv("Asthma_Data_File.csv")
# Removing id number for each subject
asthmaData = data.frame(asthmaDataOriginal[,-2])
head(asthmaData)
dim(asthmaDataOriginal)
# Summary gives a description for each input and output, giving you a sense of what the data looks like
summary(asthmaData)
dim(asthmaData)
# Only want  to factor the categories so removing the columns listed below.
# These are: subject, temp, humidity, windspeed and ACTScore.
names = names(asthmaData[,c(-8,-10,-12,-13)])
asthmaData[,names] = lapply(asthmaData[,names], factor)
str(asthmaData)
contrasts(asthmaData$Location)
dataFold = fold(data = asthmaData, k = 7, id_col = 'UserNo.') %>%
arrange(.folds)
dataFold = fold(data = asthmaData, k = 7, id_col = 'UserNo.') %>%
arrange(.folds)
cv = corss_validate(data = dataFold, formulas = (ACTScore~ asthmaData$Temperature + asthmaData$Humidity + (1 | asthmaData$UserNo.)), fold_cols = '.folds', family = 'gaussian', REML = FALSE)
dataFold = fold(data = asthmaData, k = 7, id_col = 'UserNo.') %>%
arrange(.folds)
cv = cross_validate(data = dataFold, formulas = (ACTScore~ asthmaData$Temperature + asthmaData$Humidity + (1 | asthmaData$UserNo.)), fold_cols = '.folds', family = 'gaussian', REML = FALSE)
dataFold = fold(data = asthmaData, k = 7, id_col = 'UserNo.') %>%
arrange(.folds)
formula = c("ACTScore~ asthmaData$Temperature + asthmaData$Humidity + (1 | asthmaData$UserNo.)")
cv = cross_validate(data = dataFold, formulas = formula, fold_cols = '.folds', family = 'gaussian', REML = FALSE)
dataFold = fold(data = asthmaData, k = 7, id_col = 'UserNo.') %>%
arrange(.folds)
formula = c("ACTScore~ asthmaData$Humidity + (1 | asthmaData$UserNo.)")
cv = cross_validate(data = dataFold, formulas = formula, fold_cols = '.folds', family = 'gaussian', REML = FALSE)
dataFold = fold(data = asthmaData, k = 7, id_col = 'UserNo.') %>%
arrange(.folds)
formula = c("ACTScore~ (1 | asthmaData$UserNo.)")
cv = cross_validate(data = dataFold, formulas = formula, fold_cols = '.folds', family = 'gaussian', REML = FALSE)
dataFold = fold(data = asthmaData, k = 7, id_col = 'UserNo.') %>%
arrange(.folds)
formula = c("asthmaData$ACTScore~ asthmaData$Temperature + asthmaData$Humidity + (1 | asthmaData$UserNo.)")
cv = cross_validate(data = dataFold, formulas = formula, fold_cols = '.folds', family = 'gaussian', REML = FALSE)
dataFold = fold(data = asthmaData, k = 10, id_col = 'UserNo.') %>%
arrange(.folds)
formula = c("asthmaData$ACTScore~ asthmaData$Temperature + asthmaData$Humidity + (1 | asthmaData$UserNo.)")
cv = cross_validate(data = dataFold, formulas = formula, fold_cols = '.folds', family = 'gaussian', REML = FALSE)
dataFold = fold(data = asthmaData, k = 4, id_col = 'UserNo.') %>%
arrange(.folds)
formula = c("asthmaData$ACTScore~ asthmaData$Temperature + asthmaData$Humidity + (1 | asthmaData$UserNo.)")
cv = cross_validate(data = dataFold, formulas = formula, fold_cols = '.folds', family = 'gaussian', REML = FALSE)
dataFold = fold(data = asthmaData, k = 1, id_col = 'UserNo.') %>%
arrange(.folds)
formula = c("asthmaData$ACTScore~ asthmaData$Temperature + asthmaData$Humidity + (1 | asthmaData$UserNo.)")
cv = cross_validate(data = dataFold, formulas = formula, fold_cols = '.folds', family = 'gaussian', REML = FALSE)
dataFold = fold(data = asthmaData, k = 1, id_col = 'UserNo.') %>%
arrange(.folds)
formula = c("asthmaData$ACTScore~ asthmaData$Temperature + asthmaData$Humidity + (1 | asthmaData$UserNo.)")
cv = cross_validate(data = dataFold, formulas = formula, fold_cols = '.folds', REML = FALSE)
dataFold = fold(data = asthmaData, k = 1, id_col = 'UserNo.') %>%
arrange(.folds)
formula = c("asthmaData$ACTScore~ asthmaData$Temperature + asthmaData$Humidity + (1 | asthmaData$UserNo.)")
cv = cross_validate(data = dataFold, formulas = formula, fold_cols = '.folds', family = 'gaussian', REML = TRUE)
dataFold = fold(data = asthmaData, k = 3, id_col = 'UserNo.') %>%
arrange(.folds)
formula = c("asthmaData$ACTScore~ asthmaData$Temperature + asthmaData$Humidity + (1 | asthmaData$UserNo.)")
cv = cross_validate(data = dataFold, formulas = formula, fold_cols = '.folds', family = 'gaussian', REML = TRUE)
