model.kb5 = ksmooth(duration, timeNext, kernel = c("normal"), bandwidth = 50)
plot(duration, timeNext)
lines(duration, model.lm$fitted.values)
points(duration, model.kb1$y,col = 'red')
points(duration, model.kb2$y,col = 'blue')
points(duration, model.kb3$y,col = 'green')
points(duration, model.kb4$y,col = 'orange')
points(duration, model.kb5$y,col = 'cyan')
model.kb1 = ksmooth(duration, timeNext, kernel = c("normal"), bandwidth = 0.5)
model.kb2 = ksmooth(duration, timeNext, kernel = c("normal"), bandwidth = 1)
model.kb3 = ksmooth(duration, timeNext, kernel = c("normal"), bandwidth = 5)
model.kb4 = ksmooth(duration, timeNext, kernel = c("normal"), bandwidth = 10)
model.kb5 = ksmooth(duration, timeNext, kernel = c("normal"), bandwidth = 500)
plot(duration, timeNext)
lines(duration, model.lm$fitted.values)
points(duration, model.kb1$y,col = 'red')
points(duration, model.kb2$y,col = 'blue')
points(duration, model.kb3$y,col = 'green')
points(duration, model.kb4$y,col = 'orange')
points(duration, model.kb5$y,col = 'cyan')
GeyserData = Rsafd::GEYSER
GeyserData = GeyserData[order(GeyserData[,1]),]
duration = GeyserData[,1]
timeNext = GeyserData[,2]
model.lm = lm(timeNext~duration)
summary(model.lm)
model.kb1 = ksmooth(duration, timeNext, kernel = c("normal"), bandwidth = 0.5)
model.kb2 = ksmooth(duration, timeNext, kernel = c("normal"), bandwidth = 1)
model.kb3 = ksmooth(duration, timeNext, kernel = c("normal"), bandwidth = 5)
model.kb4 = ksmooth(duration, timeNext, kernel = c("normal"), bandwidth = 10)
model.kb5 = ksmooth(duration, timeNext, kernel = c("normal"), bandwidth = 500)
plot(duration, timeNext)
lines(duration, model.lm$fitted.values)
points(duration, model.kb1$y,col = 'red')
points(duration, model.kb2$y,col = 'blue')
points(duration, model.kb3$y,col = 'green')
points(duration, model.kb4$y,col = 'orange')
points(duration, model.kb5$y,col = 'cyan')
model.kb1 = ksmooth(duration, timeNext, kernel = c("normal"), bandwidth = 0.5)
model.kb2 = ksmooth(duration, timeNext, kernel = c("normal"), bandwidth = 1)
model.kb3 = ksmooth(duration, timeNext, kernel = c("normal"), bandwidth = 5)
model.kb4 = ksmooth(duration, timeNext, kernel = c("normal"), bandwidth = 10)
model.kb5 = ksmooth(duration, timeNext, kernel = c("normal"), bandwidth = 500)
plot(duration, timeNext)
lines(duration, model.lm$fitted.values)
lines(duration, model.kb1$y,col = 'red')
lines(duration, model.kb2$y,col = 'blue')
lines(duration, model.kb3$y,col = 'green')
lines(duration, model.kb4$y,col = 'orange')
lines(duration, model.kb5$y,col = 'cyan')
model.kb1 = ksmooth(duration, timeNext, kernel = c("normal"), bandwidth = 0.5)
model.kb2 = ksmooth(duration, timeNext, kernel = c("normal"), bandwidth = 1)
model.kb3 = ksmooth(duration, timeNext, kernel = c("normal"), bandwidth = 5)
model.kb4 = ksmooth(duration, timeNext, kernel = c("normal"), bandwidth = 10)
model.kb5 = ksmooth(duration, timeNext, kernel = c("normal"), bandwidth = 50)
plot(duration, timeNext)
lines(duration, model.lm$fitted.values)
lines(duration, model.kb1$y,col = 'red')
lines(duration, model.kb2$y,col = 'blue')
lines(duration, model.kb3$y,col = 'green')
lines(duration, model.kb4$y,col = 'orange')
lines(duration, model.kb5$y,col = 'cyan')
shipData = Rsafd::SHIP
head(shipData)
shipData = Rsafd::SHIP
time = 1:length(shipData)
shipData = Rsafd::SHIP
time = 1:length(shipData)
model.ls = lsfit(time,shipData)
model.abs = l1fit(time,shipData)
library(Rsafd)
shipData = Rsafd::SHIP
time = 1:length(shipData)
model.ls = lsfit(time,shipData)
model.abs = l1fit(time,shipData)
model.ls$coefficients
model.abs$coefficients
plot(time,shipData)
lines(time,fitted(model.ls) , col = 'red')
lines(time,fitted(model.abs), col = 'blue')
library(Rsafd)
shipData = Rsafd::SHIP
time = 1:length(shipData)
model.lm = lm(shipData~time)
model.abs = l1fit(time,shipData)
model.lm$coefficients
model.abs$coefficients
plot(time,shipData)
lines(time,model.lm$fitted.values , col = 'red')
lines(time,fitted(model.abs), col = 'blue')
plot(time,shipData)
lines(time, fitted(lm(shipData~poly(time,2))), lty=3)
plot(time,shipData)
lines(time, fitted(lm(shipData~poly(time,2))), lty=3)
lines(time, fitted(lm(shipData~poly(time,4))), lty=1)
lines(time, fitted(lm(shipData~poly(time,6))), lty=2)
lines(time, fitted(lm(shipData~poly(time,8))), lty=4)
plot(time,shipData)
lines(time, fitted(lm(shipData~poly(time,2))), col= 'red')
lines(time, fitted(lm(shipData~poly(time,4))), col= 'green')
lines(time, fitted(lm(shipData~poly(time,6))), col= 'blue')
lines(time, fitted(lm(shipData~poly(time,8))), col= 'purple')
plot(time,shipData, main="Natural Splines")
lines(time,fitted(lm(shipData~splines::ns(time,df=2))), col = 'red')
lines(time,fitted(lm(shipData~splines::ns(time,df=6))), col = 'green')
lines(time,fitted(lm(shipData~splines::ns(time,df=10))), col = 'blue')
lines(time,fitted(lm(shipData~splines::ns(time,df=14))), col = 'purple')
lines(time,fitted(lm(shipData~splines::ns(time,df=16))), col = 'cyan')
model.kb1 = ksmooth(time, shipData, kernel = c("normal"), bandwidth = 1)
model.kb2 = ksmooth(time, shipData, kernel = c("normal"), bandwidth = 5)
model.kb3 = ksmooth(time, shipData, kernel = c("normal"), bandwidth = 20)
model.kb4 = ksmooth(time, shipData, kernel = c("normal"), bandwidth = 50)
model.kb5 = ksmooth(time, shipData, kernel = c("normal"), bandwidth = 125)
plot(time, shipData)
lines(duration, model.kb1$y,col = 'red')
model.kb1 = ksmooth(time, shipData, kernel = c("normal"), bandwidth = 1)
model.kb2 = ksmooth(time, shipData, kernel = c("normal"), bandwidth = 5)
model.kb3 = ksmooth(time, shipData, kernel = c("normal"), bandwidth = 20)
model.kb4 = ksmooth(time, shipData, kernel = c("normal"), bandwidth = 50)
model.kb5 = ksmooth(time, shipData, kernel = c("normal"), bandwidth = 125)
plot(time, shipData)
lines(time, model.kb1$y,col = 'red')
model.kb1 = ksmooth(time, shipData, kernel = c("normal"), bandwidth = 1)
model.kb2 = ksmooth(time, shipData, kernel = c("normal"), bandwidth = 5)
model.kb3 = ksmooth(time, shipData, kernel = c("normal"), bandwidth = 20)
model.kb4 = ksmooth(time, shipData, kernel = c("normal"), bandwidth = 50)
model.kb5 = ksmooth(time, shipData, kernel = c("normal"), bandwidth = 125)
plot(time, shipData)
lines(time, model.kb1$y,col = 'red')
model.kb1 = ksmooth(time, shipData, kernel = c("normal"), bandwidth = 1)
model.kb2 = ksmooth(time, shipData, kernel = c("normal"), bandwidth = 5)
model.kb3 = ksmooth(time, shipData, kernel = c("normal"), bandwidth = 20)
model.kb4 = ksmooth(time, shipData, kernel = c("normal"), bandwidth = 50)
model.kb5 = ksmooth(time, shipData, kernel = c("normal"), bandwidth = 125)
plot(time, shipData)
length(time)
length(model.kb1$y)
#lines(time, model.kb1$y,col = 'red')
#lines(time, model.kb2$y,col = 'blue')
#lines(time, model.kb3$y,col = 'green')
#lines(time, model.kb4$y,col = 'orange')
#lines(time, model.kb5$y,col = 'cyan')
library(Rsafd)
shipData = Rsafd::SHIP
time = 1:length(shipData)
model.lm = lm(shipData~time)
model.abs = l1fit(time,shipData)
model.lm$coefficients
model.abs$coefficients
plot(time,shipData)
lines(time,model.lm$fitted.values , col = 'red')
lines(time,fitted(model.abs), col = 'blue')
library(Rsafd)
shipData = Rsafd::SHIP
time = 1:length(shipData)
model.lm = lm(shipData~time)
model.abs = l1fit(time,shipData)
model.lm$coefficients
model.abs$coefficients
plot(time,shipData)
lines(time,model.lm$fitted.values , col = 'red')
lines(time,fitted(model.abs), col = 'blue')
length(time)
library(Rsafd)
shipData = Rsafd::SHIP
time = 1:length(shipData)
model.lm = lm(shipData~time)
model.abs = l1fit(time,shipData)
model.lm$coefficients
model.abs$coefficients
plot(time,shipData)
lines(time,model.lm$fitted.values , col = 'red')
lines(time,fitted(model.abs), col = 'blue')
length(time)
model.kb1 = ksmooth(time, shipData, kernel = c("normal"), bandwidth = 1)
model.kb2 = ksmooth(time, shipData, kernel = c("normal"), bandwidth = 5)
model.kb3 = ksmooth(time, shipData, kernel = c("normal"), bandwidth = 20)
model.kb4 = ksmooth(time, shipData, kernel = c("normal"), bandwidth = 50)
model.kb5 = ksmooth(time, shipData, kernel = c("normal"), bandwidth = 125)
plot(time, shipData)
length(time)
length(model.kb1$y)
#lines(time, model.kb1$y,col = 'red')
#lines(time, model.kb2$y,col = 'blue')
#lines(time, model.kb3$y,col = 'green')
#lines(time, model.kb4$y,col = 'orange')
#lines(time, model.kb5$y,col = 'cyan')
knitr::opts_chunk$set(echo = TRUE)
GeyserData = Rsafd::GEYSER
GeyserData = GeyserData[order(GeyserData[,1]),]
duration = GeyserData[,1]
timeNext = GeyserData[,2]
model.lm = lm(timeNext~duration)
summary(model.lm)
model.kb1 = ksmooth(duration, timeNext, kernel = c("normal"), bandwidth = 0.5)
model.kb2 = ksmooth(duration, timeNext, kernel = c("normal"), bandwidth = 1)
model.kb3 = ksmooth(duration, timeNext, kernel = c("normal"), bandwidth = 5)
model.kb4 = ksmooth(duration, timeNext, kernel = c("normal"), bandwidth = 10)
model.kb5 = ksmooth(duration, timeNext, kernel = c("normal"), bandwidth = 50)
plot(duration, timeNext)
lines(duration, model.lm$fitted.values)
lines(duration, model.kb1$y,col = 'red')
lines(duration, model.kb2$y,col = 'blue')
lines(duration, model.kb3$y,col = 'green')
lines(duration, model.kb4$y,col = 'orange')
lines(duration, model.kb5$y,col = 'cyan')
library(Rsafd)
shipData = Rsafd::SHIP
time = 1:length(shipData)
model.lm = lm(shipData~time)
model.abs = l1fit(time,shipData)
model.lm$coefficients
model.abs$coefficients
plot(time,shipData)
lines(time,model.lm$fitted.values , col = 'red')
lines(time,fitted(model.abs), col = 'blue')
plot(time,shipData)
lines(time, fitted(lm(shipData~poly(time,2))), col= 'red')
lines(time, fitted(lm(shipData~poly(time,4))), col= 'green')
lines(time, fitted(lm(shipData~poly(time,6))), col= 'blue')
lines(time, fitted(lm(shipData~poly(time,8))), col= 'purple')
plot(time,shipData, main="Natural Splines")
lines(time,fitted(lm(shipData~splines::ns(time,df=2))), col = 'red')
lines(time,fitted(lm(shipData~splines::ns(time,df=6))), col = 'green')
lines(time,fitted(lm(shipData~splines::ns(time,df=10))), col = 'blue')
lines(time,fitted(lm(shipData~splines::ns(time,df=14))), col = 'purple')
lines(time,fitted(lm(shipData~splines::ns(time,df=16))), col = 'cyan')
model.k1 = ksmooth(time, shipData, kernel = c("normal"), bandwidth = 1)
model.k2 = ksmooth(time, shipData, kernel = c("normal"), bandwidth = 5)
model.k3 = ksmooth(time, shipData, kernel = c("normal"), bandwidth = 20)
model.k4 = ksmooth(time, shipData, kernel = c("normal"), bandwidth = 50)
model.k5 = ksmooth(time, shipData, kernel = c("normal"), bandwidth = 125)
plot(time, shipData)
length(time)
length(model.k1$y)
#lines(time, model.kb1$y,col = 'red')
#lines(time, model.kb2$y,col = 'blue')
#lines(time, model.kb3$y,col = 'green')
#lines(time, model.kb4$y,col = 'orange')
#lines(time, model.kb5$y,col = 'cyan')
data = Rsafd::ROCK
head(data)
data = Rsafd::ROCK
head(data)
dim(data)
data = Rsafd::ROCK
#head(data)
x = data[,1:3]
y = data[,4]
data = Rsafd::ROCK
#head(data)
x = data[,0:3]
y = data[,4]
data = Rsafd::ROCK
#head(data)
data[,0]
# Importing the data set and printing the first 6 rows to see what it looks like
asthmaDataOriginal= read.csv("Asthma_Data_File.csv")
# Removing id number for each subject
asthmaData = data.frame(asthmaDataOriginal[,-2])
head(asthmaData)
dim(asthmaDataOriginal)
### Converting all strings to integers ###
## Can access a certain column either by a their name or column number
#asthmaData['ACTScore']
#asthmaData[14]
#asthmaData$SmokingHabit
###################################################################
## Changing age
asthmaData$Age[asthmaData$Age == 'Above 50'] = 4
asthmaData$Age[asthmaData$Age == '41-50'] = 3
asthmaData$Age[asthmaData$Age == '31-40'] = 2
asthmaData$Age[asthmaData$Age == '19-30'] = 1
## The above transformation still kept elements as char so 'as.integer' converts the char to int
asthmaData$Age = as.integer(asthmaData$Age)
# Gender,  binary, yes = 1 and no = 0
## DOES IT MATTER IF WE CHOOSE 0 AND 1 or -1 AND 1 ??????????????????????
asthmaData$Gender[asthmaData$Gender == 'Female'] = 1
asthmaData$Gender[asthmaData$Gender == 'Male'] = 0
asthmaData$Gender = as.integer(asthmaData$Gender)
# changing outdoor job
asthmaData$OutdoorJob[asthmaData$OutdoorJob == 'Frequently'] = 3
asthmaData$OutdoorJob[asthmaData$OutdoorJob == 'Occasionally'] = 2
asthmaData$OutdoorJob[asthmaData$OutdoorJob == 'Rarely'] = 1
asthmaData$OutdoorJob = as.integer(asthmaData$OutdoorJob)
# Outdoor activity
asthmaData$OutdoorActivities[asthmaData$OutdoorActivities == 'Extremely likely'] = 3
asthmaData$OutdoorActivities[asthmaData$OutdoorActivities == 'Neither likely or dislikely'] = 2
asthmaData$OutdoorActivities[asthmaData$OutdoorActivities == 'Not at all likely'] = 1
asthmaData$OutdoorActivities = as.integer(asthmaData$OutdoorActivities)
# Since smoking was binary, yes = 1 and no = 0
asthmaData$SmokingHabit[asthmaData$SmokingHabit == "Yes"] = 1
asthmaData$SmokingHabit[asthmaData$SmokingHabit == "No"] = 0
asthmaData$SmokingHabit = as.integer(asthmaData$SmokingHabit)
# UV Index, binary
asthmaData$UVIndex[asthmaData$UVIndex == 'Extreme'] = 1
asthmaData$UVIndex[asthmaData$UVIndex == 'Low'] = 0
asthmaData$UVIndex = as.integer(asthmaData$UVIndex)
library(corrplot)
cor = cor(asthmaData, method = c("pearson", "kendall", "spearman"))
### Converting all strings to integers ###
## Can access a certain column either by a their name or column number
#asthmaData['ACTScore']
#asthmaData[14]
#asthmaData$SmokingHabit
###################################################################
## Location
asthmaData$Location[asthmaData$Location == 'Petaling'] = 0
asthmaData$Location[asthmaData$Location == 'Kampong Baharu Balakong'] = 1
asthmaData$Location[asthmaData$Location == 'Putrajaya'] = 2
asthmaData$Location[asthmaData$Location == 'Kota Bharu'] = 3
asthmaData$Location[asthmaData$Location == 'Kuala Lampur'] = 4
asthmaData$Location[asthmaData$Location == 'Cyberjaya'] = 5
## Changing age
asthmaData$Age[asthmaData$Age == 'Above 50'] = 4
asthmaData$Age[asthmaData$Age == '41-50'] = 3
asthmaData$Age[asthmaData$Age == '31-40'] = 2
asthmaData$Age[asthmaData$Age == '19-30'] = 1
## The above transformation still kept elements as char so 'as.integer' converts the char to int
asthmaData$Age = as.integer(asthmaData$Age)
# Gender,  binary, yes = 1 and no = 0
## DOES IT MATTER IF WE CHOOSE 0 AND 1 or -1 AND 1 ??????????????????????
asthmaData$Gender[asthmaData$Gender == 'Female'] = 1
asthmaData$Gender[asthmaData$Gender == 'Male'] = 0
asthmaData$Gender = as.integer(asthmaData$Gender)
# changing outdoor job
asthmaData$OutdoorJob[asthmaData$OutdoorJob == 'Frequently'] = 3
asthmaData$OutdoorJob[asthmaData$OutdoorJob == 'Occasionally'] = 2
asthmaData$OutdoorJob[asthmaData$OutdoorJob == 'Rarely'] = 1
asthmaData$OutdoorJob = as.integer(asthmaData$OutdoorJob)
# Outdoor activity
asthmaData$OutdoorActivities[asthmaData$OutdoorActivities == 'Extremely likely'] = 3
asthmaData$OutdoorActivities[asthmaData$OutdoorActivities == 'Neither likely or dislikely'] = 2
asthmaData$OutdoorActivities[asthmaData$OutdoorActivities == 'Not at all likely'] = 1
asthmaData$OutdoorActivities = as.integer(asthmaData$OutdoorActivities)
# Since smoking was binary, yes = 1 and no = 0
asthmaData$SmokingHabit[asthmaData$SmokingHabit == "Yes"] = 1
asthmaData$SmokingHabit[asthmaData$SmokingHabit == "No"] = 0
asthmaData$SmokingHabit = as.integer(asthmaData$SmokingHabit)
# UV Index, binary
asthmaData$UVIndex[asthmaData$UVIndex == 'Extreme'] = 1
asthmaData$UVIndex[asthmaData$UVIndex == 'Low'] = 0
asthmaData$UVIndex = as.integer(asthmaData$UVIndex)
library(corrplot)
cor = cor(asthmaData, method = c("pearson", "kendall", "spearman"))
summary(asthmaData)
library(corrplot)
cor = cor(asthmaData[-asthmaData$Location], method = c("pearson", "kendall", "spearman"))
library(corrplot)
cor = cor(asthmaData[,-asthmaData$Location], method = c("pearson", "kendall", "spearman"))
library(corrplot)
cor = cor(asthmaData[,-2], method = c("pearson", "kendall", "spearman"))
corrplot(cor, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
heatmap(cor, sym = TRUE)
head(asthmaData$Location)
### Converting all strings to integers ###
## Can access a certain column either by a their name or column number
#asthmaData['ACTScore']
#asthmaData[14]
#asthmaData$SmokingHabit
###################################################################
## Location
asthmaData$Location[asthmaData$Location == 'Petaling'] = as.numeric(0)
asthmaData$Location[asthmaData$Location == 'Kampong Baharu Balakong'] = 1
asthmaData$Location[asthmaData$Location == 'Putrajaya'] = 2
asthmaData$Location[asthmaData$Location == 'Kota Bharu'] = 3
asthmaData$Location[asthmaData$Location == 'Kuala Lampur'] = 4
asthmaData$Location[asthmaData$Location == 'Cyberjaya'] = 5
## Changing age
asthmaData$Age[asthmaData$Age == 'Above 50'] = 4
asthmaData$Age[asthmaData$Age == '41-50'] = 3
asthmaData$Age[asthmaData$Age == '31-40'] = 2
asthmaData$Age[asthmaData$Age == '19-30'] = 1
## The above transformation still kept elements as char so 'as.integer' converts the char to int
asthmaData$Age = as.integer(asthmaData$Age)
# Gender,  binary, yes = 1 and no = 0
## DOES IT MATTER IF WE CHOOSE 0 AND 1 or -1 AND 1 ??????????????????????
asthmaData$Gender[asthmaData$Gender == 'Female'] = 1
asthmaData$Gender[asthmaData$Gender == 'Male'] = 0
asthmaData$Gender = as.integer(asthmaData$Gender)
# changing outdoor job
asthmaData$OutdoorJob[asthmaData$OutdoorJob == 'Frequently'] = 3
asthmaData$OutdoorJob[asthmaData$OutdoorJob == 'Occasionally'] = 2
asthmaData$OutdoorJob[asthmaData$OutdoorJob == 'Rarely'] = 1
asthmaData$OutdoorJob = as.integer(asthmaData$OutdoorJob)
# Outdoor activity
asthmaData$OutdoorActivities[asthmaData$OutdoorActivities == 'Extremely likely'] = 3
asthmaData$OutdoorActivities[asthmaData$OutdoorActivities == 'Neither likely or dislikely'] = 2
asthmaData$OutdoorActivities[asthmaData$OutdoorActivities == 'Not at all likely'] = 1
asthmaData$OutdoorActivities = as.integer(asthmaData$OutdoorActivities)
# Since smoking was binary, yes = 1 and no = 0
asthmaData$SmokingHabit[asthmaData$SmokingHabit == "Yes"] = 1
asthmaData$SmokingHabit[asthmaData$SmokingHabit == "No"] = 0
asthmaData$SmokingHabit = as.integer(asthmaData$SmokingHabit)
# UV Index, binary
asthmaData$UVIndex[asthmaData$UVIndex == 'Extreme'] = 1
asthmaData$UVIndex[asthmaData$UVIndex == 'Low'] = 0
asthmaData$UVIndex = as.integer(asthmaData$UVIndex)
### Converting all strings to integers ###
## Can access a certain column either by a their name or column number
#asthmaData['ACTScore']
#asthmaData[14]
#asthmaData$SmokingHabit
###################################################################
## Location
asthmaData$Location[asthmaData$Location == 'Petaling'] = as.numeric(0)
asthmaData$Location[asthmaData$Location == 'Kampong Baharu Balakong'] = as.numeric(1)
asthmaData$Location[asthmaData$Location == 'Putrajaya'] = as.numeric(2)
asthmaData$Location[asthmaData$Location == 'Kota Bharu'] = as.numeric(3)
asthmaData$Location[asthmaData$Location == 'Kuala Lampur'] = as.numeric(4)
asthmaData$Location[asthmaData$Location == 'Cyberjaya'] = as.numeric(5)
## Changing age
asthmaData$Age[asthmaData$Age == 'Above 50'] = 4
asthmaData$Age[asthmaData$Age == '41-50'] = 3
asthmaData$Age[asthmaData$Age == '31-40'] = 2
asthmaData$Age[asthmaData$Age == '19-30'] = 1
## The above transformation still kept elements as char so 'as.integer' converts the char to int
asthmaData$Age = as.integer(asthmaData$Age)
# Gender,  binary, yes = 1 and no = 0
## DOES IT MATTER IF WE CHOOSE 0 AND 1 or -1 AND 1 ??????????????????????
asthmaData$Gender[asthmaData$Gender == 'Female'] = 1
asthmaData$Gender[asthmaData$Gender == 'Male'] = 0
asthmaData$Gender = as.integer(asthmaData$Gender)
# changing outdoor job
asthmaData$OutdoorJob[asthmaData$OutdoorJob == 'Frequently'] = 3
asthmaData$OutdoorJob[asthmaData$OutdoorJob == 'Occasionally'] = 2
asthmaData$OutdoorJob[asthmaData$OutdoorJob == 'Rarely'] = 1
asthmaData$OutdoorJob = as.integer(asthmaData$OutdoorJob)
# Outdoor activity
asthmaData$OutdoorActivities[asthmaData$OutdoorActivities == 'Extremely likely'] = 3
asthmaData$OutdoorActivities[asthmaData$OutdoorActivities == 'Neither likely or dislikely'] = 2
asthmaData$OutdoorActivities[asthmaData$OutdoorActivities == 'Not at all likely'] = 1
asthmaData$OutdoorActivities = as.integer(asthmaData$OutdoorActivities)
# Since smoking was binary, yes = 1 and no = 0
asthmaData$SmokingHabit[asthmaData$SmokingHabit == "Yes"] = 1
asthmaData$SmokingHabit[asthmaData$SmokingHabit == "No"] = 0
asthmaData$SmokingHabit = as.integer(asthmaData$SmokingHabit)
# UV Index, binary
asthmaData$UVIndex[asthmaData$UVIndex == 'Extreme'] = 1
asthmaData$UVIndex[asthmaData$UVIndex == 'Low'] = 0
asthmaData$UVIndex = as.integer(asthmaData$UVIndex)
head(asthmaData$Location)
library(corrplot)
cor = cor(asthmaData, method = c("pearson", "kendall", "spearman"))
summary(asthmaData$Location)
asthmaData$Location = as.numeric(asthmaData$Location)
summary(asthmaData$Location)
library(corrplot)
cor = cor(asthmaData, method = c("pearson", "kendall", "spearman"))
corrplot(cor, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
heatmap(cor, sym = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(caret)
library(car)
library(olsrr)
library(lme4)
# Importing the data set and printing the first 6 rows to see what it looks like
asthmaDataOriginal= read.csv("Asthma_Data_File.csv")
# Removing id number for each subject
asthmaData = data.frame(asthmaDataOriginal[,-2])
head(asthmaData)
dim(asthmaDataOriginal)
# Summary gives a description for each input and output, giving you a sense of what the data looks like
summary(asthmaData)
dim(asthmaData)
# Only want  to factor the categories so removing the columns listed below.
# These are: subject, temp, humidity, windspeed and ACTScore.
names = names(asthmaData[,c(-1,-8,-10,-12,-13)])
asthmaData[,names] = lapply(asthmaData[,names], factor)
str(asthmaData)
# Only want  to factor the categories so removing the columns listed below.
# These are: subject, temp, humidity, windspeed and ACTScore.
names = names(asthmaData[,c(-1,-8,-10,-12,-13)])
asthmaData[,names] = lapply(asthmaData[,names], factor)
str(asthmaData)
match.fun
# Only want  to factor the categories so removing the columns listed below.
# These are: subject, temp, humidity, windspeed and ACTScore.
names = names(asthmaData[,c(-1,-8,-10,-12,-13)])
asthmaData[,names] = lapply(asthmaData[,names], factor)
str(asthmaData)
head(asthmaData$Location)
# Only want  to factor the categories so removing the columns listed below.
# These are: subject, temp, humidity, windspeed and ACTScore.
names = names(asthmaData[,c(-1,-8,-10,-12,-13)])
asthmaData[,names] = lapply(asthmaData[,names], factor)
str(asthmaData)
contrasts(asthmaData$Location)
subj1 = asthmaData[asthmaData$UserNo. == 1,]
subj2 = asthmaData[asthmaData$UserNo. == 2,]
subj3 = asthmaData[asthmaData$UserNo. == 3,]
subj4 = asthmaData[asthmaData$UserNo. == 4,]
subj5 = asthmaData[asthmaData$UserNo. == 5,]
subj6 = asthmaData[asthmaData$UserNo. == 6,]
subj7 = asthmaData[asthmaData$UserNo. == 7,]
subj8 = asthmaData[asthmaData$UserNo. == 8,]
subj9 = asthmaData[asthmaData$UserNo. == 9,]
subj10 = asthmaData[asthmaData$UserNo. == 10,]
sprintf('Number of Instances per Subject')
sprintf('Subject 1: %f',dim(subj1)[1])
sprintf('Subject 2: %f',dim(subj2)[1])
sprintf('Subject 3: %f',dim(subj3)[1])
sprintf('Subject 4: %f',dim(subj4)[1])
sprintf('Subject 5: %f',dim(subj5)[1])
sprintf('Subject 6: %f',dim(subj6)[1])
sprintf('Subject 7: %f',dim(subj7)[1])
sprintf('Subject 8: %f',dim(subj8)[1])
sprintf('Subject 9: %f',dim(subj9)[1])
sprintf('Subject 10: %f',dim(subj10)[1])
