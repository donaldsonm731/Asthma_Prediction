# numberic and store it as an outlier. I think take the union of all the outliers
# to keep track of when looking at other inputs that are continuous.
outlier_ageT = as.numeric(Boxplot(train$Temperature~train$Age))
outlier_genderT = as.numeric(Boxplot(train$Temperature~train$Gender))
outlier_smT = as.numeric(Boxplot(train$Temperature~train$SmokingHabit))
outlier_odjT = as.numeric(Boxplot(train$Temperature~train$OutdoorJob))
outlier_odaT = as.numeric(Boxplot(train$Temperature~train$OutdoorActivities))
outlier_pT = as.numeric(Boxplot(train$Temperature~train$Pressure))
outlier_uvT = as.numeric(Boxplot(train$Temperature~train$UVIndex))
# The last part combines all the outlier indices found as a vector and keeps all
# number once, so say 114 is stored twice then the unique() will just take one
# of them out
totOutlier_T= c(outlier_ageT, outlier_genderT, outlier_smT, outlier_odjT, outlier_odaT,outlier_pT, outlier_uvT)
table(totOutlier_T)
# This box and whisker plot created the boxplot and also labels the points that are
# 1.5 times outside the IQR, I then take those points, convert them from chr to
# numberic and store it as an outlier. I think take the union of all the outliers
# to keep track of when looking at other inputs that are continuous.
outlier_ageW = as.numeric(Boxplot(train$WindSpeed~train$Age))
outlier_genderW = as.numeric(Boxplot(train$WindSpeed~train$Gender))
outlier_smW = as.numeric(Boxplot(train$WindSpeed~train$SmokingHabit))
outlier_odjW = as.numeric(Boxplot(train$WindSpeed~train$OutdoorJob))
outlier_odaW = as.numeric(Boxplot(train$WindSpeed~train$OutdoorActivities))
outlier_uvW = as.numeric(Boxplot(train$WindSpeed~train$UVIndex))
# The last part combines all the outlier indices found as a vector and keeps all
# number once, so say 114 is stored twice then the unique() will just take one
# of them out
totOutlier_W = c(outlier_ageW, outlier_genderW, outlier_smW, outlier_odjW, outlier_odaW, outlier_uvW)
table(totOutlier_W)
# This box and whisker plot created the boxplot and also labels the points that are
# 1.5 times outside the IQR, I then take those points, convert them from chr to
# numberic and store it as an outlier. I think take the union of all the outliers
# to keep track of when looking at other inputs that are continuous.
outlier_ageP = as.numeric(Boxplot(train$Pressure~train$Age))
outlier_genderP = as.numeric(Boxplot(train$Pressure~train$Gender))
outlier_smP = as.numeric(Boxplot(train$Pressure~train$SmokingHabit))
outlier_odjP = as.numeric(Boxplot(train$Pressure~train$OutdoorJob))
outlier_odaP = as.numeric(Boxplot(train$Pressure~train$OutdoorActivities))
outlier_uvP = as.numeric(Boxplot(train$Pressure~train$UVIndex))
# The last part combines all the outlier indices found as a vector and keeps all
# number once, so say 114 is stored twice then the unique() will just take one
# of them out
totOutlier_P = c(outlier_ageP, outlier_genderP, outlier_smP, outlier_odjP, outlier_uvP)
table(totOutlier_P)
# Combines all outliers into on vector.
totOutliers = c(totOutlier_H, totOutlier_T, totOutlier_W, totOutlier_P)
#Gives the indices for the the ones that show up more than once.
repOutliers = which(table(totOutliers) > 1)
# This ensures that if we run the code again it will not take more
# Data out, just noticed it was going down when this was not added
# Here we use the train_original from when we made the test set to compare if
# outliers have already been taken out.
if(dim(train)[1] == dim(train_original)[1]){
train= train[-c(repOutliers),]
}
# Visual help that outliers are only removed once
dim(asthmaData)
dim(train)
length(repOutliers)
################################################################################
################################################################################
## standard normalize of continuous variable for models.
train$Humidity = scale(train$Humidity, scale = TRUE)
train$Temperature = scale(train$Temperature, scale = TRUE)
train$WindSpeed = scale(train$WindSpeed, scale = TRUE)
train$Pressure = scale(train$Pressure, scale = TRUE)
test$Humidity = scale(test$Humidity, scale = TRUE)
test$Temperature = scale(test$Temperature, scale = TRUE)
test$WindSpeed = scale(test$WindSpeed, scale = TRUE)
test$Pressure = scale(test$Pressure, scale = TRUE)
################################################################################
################################################################################
library(faraway)
model.vif = lm(ACTScore ~ Temperature + WindSpeed + Age + SmokingHabit + Humidity + Gender + OutdoorJob + OutdoorActivities + Pressure + UVIndex, data = train)
vif(model.vif)
################################################################################
################################################################################
# https://www.rdocumentation.org/packages/lmerTest/versions/2.0-36/topics/step
model.lmer.step <- lmerTest::lmer(ACTScore ~ Temperature + WindSpeed + Age + SmokingHabit + Humidity + Gender + OutdoorJob + OutdoorActivities + Pressure + UVIndex+ (1|UserNo.) + (1|Location) + (0 + Gender|UserNo.) + (0 + Gender|Location) + (0 + Age|UserNo.) + (0 + Age|Location), data = train)
step_res.lmer <- lmerTest::step(model.lmer.step)
model.lmer <- get_model(step_res.lmer)
anova(model.lmer)
step_res.lmer
model.lm <- lm(ACTScore ~ Temperature + WindSpeed + Age + SmokingHabit + Humidity + Gender + OutdoorJob + OutdoorActivities + Pressure + UVIndex, data = train)
step_res.lm <- step(model.lm)
###############################################################################
model.lm = lm(ACTScore ~ WindSpeed + Humidity + Gender + OutdoorJob + Pressure + UVIndex, data = train)
summary(model.lm)
model.lm$coefficients
confint(model.lm)
'%ni%' = Negate('%in%')
x = data.matrix(train[,c('Humidity', 'Temperature', 'Pressure', 'Age', 'Gender', 'UVIndex', 'OutdoorJob', 'OutdoorActivities', 'SmokingHabit', 'WindSpeed')])
y = train[,'ACTScore']
model.glmnet.cv = cv.glmnet(x,y, alpha = 1)
best_lambda = model.glmnet.cv$lambda.min
#plot(model.glmnet)
model.glmnet = glmnet(x,y, alpha = 1,lambda = best_lambda)
coef(model.glmnet)
#confint(model.glmnet)
###############################################################################
################################################################################
library(rsample)
library(Matrix)
set.seed(23)
splits <- group_vfold_cv(train, group = "UserNo.", v = 7)
Caret_splits <- rsample2caret(splits)
tunegrid = expand.grid(alpha = 0:1, lambda=seq(0.0001, 1, length = 20))
tc_grouped <- trainControl(method = "cv", number = 7,
index = Caret_splits$index,
indexOut = Caret_splits$indexOut)
model.glmnet.loocv<- train(ACTScore ~ Temperature + WindSpeed + Age + SmokingHabit + Humidity + Gender + OutdoorJob + OutdoorActivities + Pressure + UVIndex , data = train,
method = "glmnet", family = "gaussian", tuneGrid = tunegrid,
trControl = tc_grouped)
model.glmnet.loocv$results
which(model.glmnet.loocv$results$lambda == model.glmnet.loocv$bestTune$lambda)
library(rsample)
model.lm.loocv <- train(ACTScore ~ WindSpeed + Humidity + Gender + OutdoorJob + Pressure + UVIndex,
data = train, method = "lm", family = "gaussian",
trControl = tc_grouped)
model.lm.loocv$results
model.lm.loocv$results$RMSE
model.glmnet.loocv$results$RMSE[which(model.glmnet.loocv$results$lambda == model.glmnet.loocv$bestTune$lambda)[2]]
model.lm.loocv$results$Rsquared
model.glmnet.loocv$results$Rsquared[which(model.glmnet.loocv$results$lambda == model.glmnet.loocv$bestTune$lambda)[2]]
model.lm.loocv$results$MAE
model.glmnet.loocv$results$MAE[which(model.glmnet.loocv$results$lambda == model.glmnet.loocv$bestTune$lambda)[2]]
print("LM Model RMSE" model.lm.loocv$results$RMSE)
print("LM Model RMSE", model.lm.loocv$results$RMSE)
model.glmnet.loocv$results$RMSE[which(model.glmnet.loocv$results$lambda == model.glmnet.loocv$bestTune$lambda)[2]]
model.lm.loocv$results$Rsquared
model.glmnet.loocv$results$Rsquared[which(model.glmnet.loocv$results$lambda == model.glmnet.loocv$bestTune$lambda)[2]]
model.lm.loocv$results$MAE
model.glmnet.loocv$results$MAE[which(model.glmnet.loocv$results$lambda == model.glmnet.loocv$bestTune$lambda)[2]]
cat("LM Model RMSE: ", model.lm.loocv$results$RMSE)
model.glmnet.loocv$results$RMSE[which(model.glmnet.loocv$results$lambda == model.glmnet.loocv$bestTune$lambda)[2]]
model.lm.loocv$results$Rsquared
model.glmnet.loocv$results$Rsquared[which(model.glmnet.loocv$results$lambda == model.glmnet.loocv$bestTune$lambda)[2]]
model.lm.loocv$results$MAE
model.glmnet.loocv$results$MAE[which(model.glmnet.loocv$results$lambda == model.glmnet.loocv$bestTune$lambda)[2]]
cat("LM Model RMSE: ", model.lm.loocv$results$RMSE)
cat("Lasso Model RMSE: ", model.glmnet.loocv$results$RMSE[which(model.glmnet.loocv$results$lambda == model.glmnet.loocv$bestTune$lambda)[2]])
cat("LM Model $R^2$: ",model.lm.loocv$results$Rsquared)
cat("Lasso Model $R^2$: ", model.glmnet.loocv$results$Rsquared[which(model.glmnet.loocv$results$lambda == model.glmnet.loocv$bestTune$lambda)[2]])
cat("LM Model MAE: ", model.lm.loocv$results$MAE)
cat("Lasso Model MAE: ", model.glmnet.loocv$results$MAE[which(model.glmnet.loocv$results$lambda == model.glmnet.loocv$bestTune$lambda)[2]])
print(paste0("LM Model RMSE: ", model.lm.loocv$results$RMSE))
print(paste0("Lasso Model RMSE: ", model.glmnet.loocv$results$RMSE[which(model.glmnet.loocv$results$lambda == model.glmnet.loocv$bestTune$lambda)[2]]))
cat("LM Model $R^2$: ",model.lm.loocv$results$Rsquared)
cat("Lasso Model $R^2$: ", model.glmnet.loocv$results$Rsquared[which(model.glmnet.loocv$results$lambda == model.glmnet.loocv$bestTune$lambda)[2]])
cat("LM Model MAE: ", model.lm.loocv$results$MAE)
cat("Lasso Model MAE: ", model.glmnet.loocv$results$MAE[which(model.glmnet.loocv$results$lambda == model.glmnet.loocv$bestTune$lambda)[2]])
print(paste0("LM Model RMSE: ", model.lm.loocv$results$RMSE))
print(paste0("Lasso Model RMSE: ", model.glmnet.loocv$results$RMSE[which(model.glmnet.loocv$results$lambda == model.glmnet.loocv$bestTune$lambda)[2]]))
print(paste0("LM Model $R^2$: ",model.lm.loocv$results$Rsquared))
print(paste0("Lasso Model $R^2$: ", model.glmnet.loocv$results$Rsquared[which(model.glmnet.loocv$results$lambda == model.glmnet.loocv$bestTune$lambda)[2]]))
print(paste0("LM Model MAE: ", model.lm.loocv$results$MAE))
print(paste0("Lasso Model MAE: ", model.glmnet.loocv$results$MAE[which(model.glmnet.loocv$results$lambda == model.glmnet.loocv$bestTune$lambda)[2]]))
?round
print(paste0("LM Model RMSE: ", round(model.lm.loocv$results$RMSE, digits = 3))
print(paste0("Lasso Model RMSE: ", model.glmnet.loocv$results$RMSE[which(model.glmnet.loocv$results$lambda == model.glmnet.loocv$bestTune$lambda)[2]]))
print(paste0("LM Model RMSE: ", round(model.lm.loocv$results$RMSE, digits = 3)))
print(paste0("Lasso Model RMSE: ", model.glmnet.loocv$results$RMSE[which(model.glmnet.loocv$results$lambda == model.glmnet.loocv$bestTune$lambda)[2]]))
print(paste0("LM Model $R^2$: ",model.lm.loocv$results$Rsquared))
print(paste0("Lasso Model $R^2$: ", model.glmnet.loocv$results$Rsquared[which(model.glmnet.loocv$results$lambda == model.glmnet.loocv$bestTune$lambda)[2]]))
print(paste0("LM Model MAE: ", model.lm.loocv$results$MAE))
print(paste0("Lasso Model MAE: ", model.glmnet.loocv$results$MAE[which(model.glmnet.loocv$results$lambda == model.glmnet.loocv$bestTune$lambda)[2]]))
print(paste0("LM Model RMSE: ", round(model.lm.loocv$results$RMSE, digits = 3)))
print(paste0("Lasso Model RMSE: ", round(model.glmnet.loocv$results$RMSE[which(model.glmnet.loocv$results$lambda == model.glmnet.loocv$bestTune$lambda)[2]], digits = 3)))
print(paste0("LM Model $R^2$: ", round(model.lm.loocv$results$Rsquared, digits = 3)))
print(paste0("Lasso Model $R^2$: ", round(model.glmnet.loocv$results$Rsquared[which(model.glmnet.loocv$results$lambda == model.glmnet.loocv$bestTune$lambda)[2]], digits = 3)))
print(paste0("LM Model MAE: ", round(model.lm.loocv$results$MAE, digits = 3)))
print(paste0("Lasso Model MAE: ", round(model.glmnet.loocv$results$MAE[which(model.glmnet.loocv$results$lambda == model.glmnet.loocv$bestTune$lambda)[2]], digits = 3)))
print(paste0("LM Model RMSE: ", round(model.lm.loocv$results$RMSE, digits = 3)))
print(paste0("Lasso Model RMSE: ", round(model.glmnet.loocv$results$RMSE[which(model.glmnet.loocv$results$lambda == model.glmnet.loocv$bestTune$lambda)[2]], digits = 3)))
print(paste0("LM Model R-Squared: ", round(model.lm.loocv$results$Rsquared, digits = 3)))
print(paste0("Lasso Model R-Squared: ", round(model.glmnet.loocv$results$Rsquared[which(model.glmnet.loocv$results$lambda == model.glmnet.loocv$bestTune$lambda)[2]], digits = 3)))
print(paste0("LM Model MAE: ", round(model.lm.loocv$results$MAE, digits = 3)))
print(paste0("Lasso Model MAE: ", round(model.glmnet.loocv$results$MAE[which(model.glmnet.loocv$results$lambda == model.glmnet.loocv$bestTune$lambda)[2]], digits = 3)))
print(paste0("LM Model RMSE: ", round(model.lm.loocv$results$RMSE, digits = 3)))
print(paste0("Lasso Model RMSE: ", round(model.glmnet.loocv$results$RMSE[which(model.glmnet.loocv$results$lambda == model.glmnet.loocv$bestTune$lambda)[2]], digits = 3)))
print(paste0("LM Model R-Squared: ", round(model.lm.loocv$results$Rsquared, digits = 5)))
print(paste0("Lasso Model R-Squared: ", round(model.glmnet.loocv$results$Rsquared[which(model.glmnet.loocv$results$lambda == model.glmnet.loocv$bestTune$lambda)[2]], digits = 5)))
print(paste0("LM Model MAE: ", round(model.lm.loocv$results$MAE, digits = 3)))
print(paste0("Lasso Model MAE: ", round(model.glmnet.loocv$results$MAE[which(model.glmnet.loocv$results$lambda == model.glmnet.loocv$bestTune$lambda)[2]], digits = 3)))
print(paste0("LM Model RMSE: ", round(model.lm.loocv$results$RMSE, digits = 3)))
print(paste0("Lasso Model RMSE: ", round(model.glmnet.loocv$results$RMSE[which(model.glmnet.loocv$results$lambda == model.glmnet.loocv$bestTune$lambda)[2]], digits = 3)))
print(paste0("LM Model R-Squared: ", round(model.lm.loocv$results$Rsquared, digits = 4)))
print(paste0("Lasso Model R-Squared: ", round(model.glmnet.loocv$results$Rsquared[which(model.glmnet.loocv$results$lambda == model.glmnet.loocv$bestTune$lambda)[2]], digits = 4)))
print(paste0("LM Model MAE: ", round(model.lm.loocv$results$MAE, digits = 3)))
print(paste0("Lasso Model MAE: ", round(model.glmnet.loocv$results$MAE[which(model.glmnet.loocv$results$lambda == model.glmnet.loocv$bestTune$lambda)[2]], digits = 3)))
###############################################################################
library(caret)
y_pred = predict(model.lm, newdata = test, interval = "prediction")
data.frame(R2 = R2(y_pred, test $ ACTScore),
RMSE = RMSE(y_pred, test $ ACTScore),
MAE = MAE(y_pred, test $ ACTScore))
model.lm$coefficients
model.lm = lm(ACTScore ~ WindSpeed + Humidity + Gender + OutdoorJob + Pressure + UVIndex, data = train)
summary(model.lm)
vif(model.lm)
###############################################################################
library(caret)
y_pred = predict(model.lm, newdata = test, interval = "interval")
?predict
###############################################################################
library(caret)
y_pred = predict(model.lm, newdata = test, interval = "confidence")
data.frame(R2 = R2(y_pred, test $ ACTScore),
RMSE = RMSE(y_pred, test $ ACTScore),
MAE = MAE(y_pred, test $ ACTScore))
model.lm$coefficients
###############################################################################
library(caret)
y_pred = predict(model.lm, newdata = test, interval = "prediction")
data.frame(R2 = R2(y_pred, test $ ACTScore),
RMSE = RMSE(y_pred, test $ ACTScore),
MAE = MAE(y_pred, test $ ACTScore))
model.lm$coefficients
y_pred = predict(model.lm, newdata = test, interval = "confidence")
y_pred = predict(model.lm, newdata = test, interval = "confidence")
y_pred
y_pred = predict(model.lm, newdata = test, interval = "confidence")
y_pred
con <- sum(y_pred[,3] - y_pred[,2])
y_pred = predict(model.lm, newdata = test, interval = "confidence")
#y_pred
con <- sum(y_pred[,3] - y_pred[,2])
con
y_pred = predict(model.lm, newdata = test, interval = "confidence")
#y_pred
con <- sum(y_pred[,3] - y_pred[,2])
con/length(test)
y_pred = predict(model.lm, newdata = test, interval = "confidence")
#y_pred
con <- sum(y_pred[,3] - y_pred[,2])
con/2*length(test)
y_pred = predict(model.lm, newdata = test, interval = "confidence")
#y_pred
con <- sum(y_pred[,3] - y_pred[,2])
con/(2*length(test))
y_pred = predict(model.lm, newdata = test, interval = "confidence")
#y_pred
con <- y_pred[,3] - y_pred[,2]
y_pred = predict(model.lm, newdata = test, interval = "confidence")
#y_pred
con <- y_pred[,3] - y_pred[,2]
con
y_pred = predict(model.lm, newdata = test, interval = "confidence")
#y_pred
con <- y_pred[,3] - y_pred[,2]
avg(con)
y_pred = predict(model.lm, newdata = test, interval = "confidence")
#y_pred
con <- y_pred[,3] - y_pred[,2]
mean(con)
y_pred = predict(model.lm, newdata = test, interval = "confidence")
#y_pred
con <- y_pred[,3] - y_pred[,2]
mean(con)/2
plot(model.lm)
y_pred = predict(model.lm, newdata = test, interval = "confidence")
y_pred
#plot(model.lm)
y_pred = predict(model.lm, newdata = test, interval = "confidence")
y_pred
summary(model.lm)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(caret)
library(car)
library(olsrr)
library(lme4)
library(shiny)
library(cvms)
library(groupdata2)
library(lmerTest)
library(glmnet)
library(glmmLasso)
library(boot)
library(arm)
################################################################################
# Importing the data set
asthmaDataOriginal= read.csv("Asthma_Data_File.csv")
# Removing id number for each subject and copying original file to not corrupt it
asthmaData = data.frame(asthmaDataOriginal[,-2])
# Looking at data
head(asthmaData)  #Looking at the first 6 entries
dim(asthmaData)
# Summary gives a description for each input and output, giving you a sense of what the data looks like
summary(asthmaData)
# Only want  to factor the categories.
# Ordered categorical variables: Age, OutDoorJob, OutDoorActivities, UVIndex
# Else: just categorical variables to factor.
# Continuous Varaibale: temp, humidity, windspeed and pressure
# Dependent variable: ACTScore
names = names(asthmaData[,c(1,2, 4,7)])
asthmaData[,names] = lapply(asthmaData[,names], factor)
asthmaData[,3] = factor(asthmaData[,3], order = TRUE, levels = c("19-30", "31-40", "41-50", "Above 50"))
asthmaData[,5] = factor(asthmaData[,5], order = TRUE, levels = c("Rarely", "Occasionally", "Frequently"))
asthmaData[,6] = factor(asthmaData[,6], order = TRUE, levels = c("Not at all likely", "Neither likely or dislikely", "Extremely likely"))
asthmaData[,11] = factor(asthmaData[,11], order = TRUE, levels = c("Low", "Extreme"))
str(asthmaData)
barplot(prop.table(table(asthmaData$UserNo.)), main = 'Subject')
barplot(prop.table(table(asthmaData$Age)), main = 'Age')
barplot(prop.table(table(asthmaData$Gender)), main = 'Gender')
barplot(prop.table(table(asthmaData$OutdoorJob)), main = 'Out Door Job')
barplot(prop.table(table(asthmaData$OutdoorActivities)), main = 'Out Door Activities')
barplot(prop.table(table(asthmaData$SmokingHabit)), main = 'Smoking Habit')
barplot(prop.table(table(asthmaData$UVIndex)), main = 'UV Index')
hist(asthmaData$Humidity, breaks = 25, main = 'Humidity')
hist(asthmaData$Temperature, breaks = 25, main = 'temp')
hist(asthmaData$WindSpeed, breaks = 25, main = 'wind')
hist(asthmaData$Pressure, breaks = 12, main = 'Pressure')
hist(asthmaData$ACTScore,breaks = 17, main = 'ACT score')
table(asthmaData$Age)
table(asthmaData$Gender)
table(asthmaData$OutdoorJob)
table(asthmaData$OutdoorActivities)
table(asthmaData$SmokingHabit)
table(asthmaData$UVIndex)
table(asthmaData$ACTScore)
################################################################################
################################################################################
set.seed(23)
library(dplyr)
training <- sample(unique(asthmaData$UserNo.), 7, replace = FALSE)
train <- asthmaData %>% filter(asthmaData$UserNo. %in% training)
test <-  asthmaData %>% filter(!asthmaData$UserNo. %in% training)
# This is only used to ensure that once we remove the outliers we done continue
# to remove more indices if we run more than once. (Forshadowing to fix a problem)
train_original = train
# Looking at dimensions of training and test set
dim(train)
dim(test)
summary(train)
################################################################################
###############################################################################
## NEED TO USE PACKAGE car for this to work because of the upper case B
# This box and whisker plot created the boxplot and also labels the points that are
# 1.5 times outside the IQR, I then take those points, convert them from chr to
# numberic and store it as an outlier. I think take the union of all the outlires
# to keep track of when looking at other inputs that are continuous.
# Source for this: http://www.unige.ch/ses/sococ/cl/r/bapr.e.html
outlier_ageH = as.numeric(Boxplot(train$Humidity~train$Age))
outlier_genderH = as.numeric(Boxplot(train$Humidity~train$Gender))
outlier_smH = as.numeric(Boxplot(train$Humidity~train$SmokingHabit))
outlier_odjH = as.numeric(Boxplot(train$Humidity~train$OutdoorJob))
outlier_odaH = as.numeric(Boxplot(train$Humidity~train$OutdoorActivities))
outlier_uvH = as.numeric(Boxplot(train$Humidity~train$UVIndex))
# The last part combines all the outlier indices found as a vector
totOutlier_H = c(outlier_ageH, outlier_genderH, outlier_smH, outlier_odjH, outlier_odaH, outlier_uvH)
table(totOutlier_H) # Potential outlier indecies
## NEED TO USE PACKAGE car for this to work because of the upper case B
# This box and whisker plot created the boxplot and also labels the points that are
# 1.5 times outside the IQR, I then take those points, convert them from chr to
# numberic and store it as an outlier. I think take the union of all the outliers
# to keep track of when looking at other inputs that are continuous.
outlier_ageT = as.numeric(Boxplot(train$Temperature~train$Age))
outlier_genderT = as.numeric(Boxplot(train$Temperature~train$Gender))
outlier_smT = as.numeric(Boxplot(train$Temperature~train$SmokingHabit))
outlier_odjT = as.numeric(Boxplot(train$Temperature~train$OutdoorJob))
outlier_odaT = as.numeric(Boxplot(train$Temperature~train$OutdoorActivities))
outlier_pT = as.numeric(Boxplot(train$Temperature~train$Pressure))
outlier_uvT = as.numeric(Boxplot(train$Temperature~train$UVIndex))
# The last part combines all the outlier indices found as a vector and keeps all
# number once, so say 114 is stored twice then the unique() will just take one
# of them out
totOutlier_T= c(outlier_ageT, outlier_genderT, outlier_smT, outlier_odjT, outlier_odaT,outlier_pT, outlier_uvT)
table(totOutlier_T)
# This box and whisker plot created the boxplot and also labels the points that are
# 1.5 times outside the IQR, I then take those points, convert them from chr to
# numberic and store it as an outlier. I think take the union of all the outliers
# to keep track of when looking at other inputs that are continuous.
outlier_ageW = as.numeric(Boxplot(train$WindSpeed~train$Age))
outlier_genderW = as.numeric(Boxplot(train$WindSpeed~train$Gender))
outlier_smW = as.numeric(Boxplot(train$WindSpeed~train$SmokingHabit))
outlier_odjW = as.numeric(Boxplot(train$WindSpeed~train$OutdoorJob))
outlier_odaW = as.numeric(Boxplot(train$WindSpeed~train$OutdoorActivities))
outlier_uvW = as.numeric(Boxplot(train$WindSpeed~train$UVIndex))
# The last part combines all the outlier indices found as a vector and keeps all
# number once, so say 114 is stored twice then the unique() will just take one
# of them out
totOutlier_W = c(outlier_ageW, outlier_genderW, outlier_smW, outlier_odjW, outlier_odaW, outlier_uvW)
table(totOutlier_W)
# This box and whisker plot created the boxplot and also labels the points that are
# 1.5 times outside the IQR, I then take those points, convert them from chr to
# numberic and store it as an outlier. I think take the union of all the outliers
# to keep track of when looking at other inputs that are continuous.
outlier_ageP = as.numeric(Boxplot(train$Pressure~train$Age))
outlier_genderP = as.numeric(Boxplot(train$Pressure~train$Gender))
outlier_smP = as.numeric(Boxplot(train$Pressure~train$SmokingHabit))
outlier_odjP = as.numeric(Boxplot(train$Pressure~train$OutdoorJob))
outlier_odaP = as.numeric(Boxplot(train$Pressure~train$OutdoorActivities))
outlier_uvP = as.numeric(Boxplot(train$Pressure~train$UVIndex))
# The last part combines all the outlier indices found as a vector and keeps all
# number once, so say 114 is stored twice then the unique() will just take one
# of them out
totOutlier_P = c(outlier_ageP, outlier_genderP, outlier_smP, outlier_odjP, outlier_uvP)
table(totOutlier_P)
# Combines all outliers into on vector.
totOutliers = c(totOutlier_H, totOutlier_T, totOutlier_W, totOutlier_P)
#Gives the indices for the the ones that show up more than once.
repOutliers = which(table(totOutliers) > 1)
# This ensures that if we run the code again it will not take more
# Data out, just noticed it was going down when this was not added
# Here we use the train_original from when we made the test set to compare if
# outliers have already been taken out.
if(dim(train)[1] == dim(train_original)[1]){
train= train[-c(repOutliers),]
}
# Visual help that outliers are only removed once
dim(asthmaData)
dim(train)
length(repOutliers)
################################################################################
################################################################################
## standard normalize of continuous variable for models.
train$Humidity = scale(train$Humidity, scale = TRUE)
train$Temperature = scale(train$Temperature, scale = TRUE)
train$WindSpeed = scale(train$WindSpeed, scale = TRUE)
train$Pressure = scale(train$Pressure, scale = TRUE)
test$Humidity = scale(test$Humidity, scale = TRUE)
test$Temperature = scale(test$Temperature, scale = TRUE)
test$WindSpeed = scale(test$WindSpeed, scale = TRUE)
test$Pressure = scale(test$Pressure, scale = TRUE)
################################################################################
################################################################################
library(faraway)
model.vif = lm(ACTScore ~ Temperature + WindSpeed + Age + SmokingHabit + Humidity + Gender + OutdoorJob + OutdoorActivities + Pressure + UVIndex, data = train)
vif(model.vif)
################################################################################
################################################################################
# https://www.rdocumentation.org/packages/lmerTest/versions/2.0-36/topics/step
model.lmer.step <- lmerTest::lmer(ACTScore ~ Temperature + WindSpeed + Age + SmokingHabit + Humidity + Gender + OutdoorJob + OutdoorActivities + Pressure + UVIndex+ (1|UserNo.) + (1|Location) + (0 + Gender|UserNo.) + (0 + Gender|Location) + (0 + Age|UserNo.) + (0 + Age|Location), data = train)
step_res.lmer <- lmerTest::step(model.lmer.step)
model.lmer <- get_model(step_res.lmer)
anova(model.lmer)
step_res.lmer
model.lm <- lm(ACTScore ~ Temperature + WindSpeed + Age + SmokingHabit + Humidity + Gender + OutdoorJob + OutdoorActivities + Pressure + UVIndex, data = train)
step_res.lm <- step(model.lm)
###############################################################################
model.lm = lm(ACTScore ~ WindSpeed + Humidity + Gender + OutdoorJob + Pressure + UVIndex, data = train)
summary(model.lm)
model.lm$coefficients
confint(model.lm)
x = data.matrix(train[,c('Humidity', 'Temperature', 'Pressure', 'Age', 'Gender', 'UVIndex', 'OutdoorJob', 'OutdoorActivities', 'SmokingHabit', 'WindSpeed')])
y = train[,'ACTScore']
model.glmnet.cv = cv.glmnet(x,y, alpha = 1)
best_lambda = model.glmnet.cv$lambda.min
#plot(model.glmnet)
model.glmnet = glmnet(x,y, alpha = 1,lambda = best_lambda)
coef(model.glmnet)
#confint(model.glmnet)
###############################################################################
x = data.matrix(train[,c('Humidity', 'Temperature', 'Pressure', 'Age', 'Gender', 'UVIndex', 'OutdoorJob', 'OutdoorActivities', 'SmokingHabit', 'WindSpeed')])
y = train[,'ACTScore']
model.glmnet.cv = cv.glmnet(x,y, alpha = 1)
best_lambda = model.glmnet.cv$lambda.min
#plot(model.glmnet)
model.glmnet = glmnet(x,y, alpha = 1,lambda = best_lambda)
coef(model.glmnet)
best_lambda
#confint(model.glmnet)
###############################################################################
library(rsample)
set.seed(23)
splits <- group_vfold_cv(train, group = "UserNo.", v = 7)
Caret_splits <- rsample2caret(splits)
tc_grouped <- trainControl(method = "cv", number = 7,
index = Caret_splits$index,
indexOut = Caret_splits$indexOut)
model.lm.loocv <- train(ACTScore ~ WindSpeed + Humidity + Gender + OutdoorJob + Pressure + UVIndex,
data = train, method = "lm", family = "gaussian",
trControl = tc_grouped)
model.lm.loocv$results
################################################################################
library(rsample)
library(Matrix)
set.seed(23)
splits <- group_vfold_cv(train, group = "UserNo.", v = 7)
Caret_splits <- rsample2caret(splits)
tunegrid = expand.grid(alpha = 0:1, lambda=seq(0.0001, 1, length = 20))
model.glmnet.loocv<- train(ACTScore ~ Temperature + WindSpeed + Age + SmokingHabit + Humidity + Gender + OutdoorJob + OutdoorActivities + Pressure + UVIndex , data = train,
method = "glmnet", family = "gaussian", tuneGrid = tunegrid,
trControl = tc_grouped)
model.glmnet.loocv$results
which(model.glmnet.loocv$results$lambda == model.glmnet.loocv$bestTune$lambda)[2]
print(paste0("LM Model RMSE: ", round(model.lm.loocv$results$RMSE, digits = 3)))
print(paste0("Lasso Model RMSE: ", round(model.glmnet.loocv$results$RMSE[which(model.glmnet.loocv$results$lambda == model.glmnet.loocv$bestTune$lambda)[2]], digits = 3)))
print(paste0("LM Model R-Squared: ", round(model.lm.loocv$results$Rsquared, digits = 4)))
print(paste0("Lasso Model R-Squared: ", round(model.glmnet.loocv$results$Rsquared[which(model.glmnet.loocv$results$lambda == model.glmnet.loocv$bestTune$lambda)[2]], digits = 4)))
print(paste0("LM Model MAE: ", round(model.lm.loocv$results$MAE, digits = 3)))
print(paste0("Lasso Model MAE: ", round(model.glmnet.loocv$results$MAE[which(model.glmnet.loocv$results$lambda == model.glmnet.loocv$bestTune$lambda)[2]], digits = 3)))
###############################################################################
library(caret)
y_pred = predict(model.lm, newdata = test, interval = "prediction")
y_pred
data.frame(R2 = R2(y_pred, test $ ACTScore),
RMSE = RMSE(y_pred, test $ ACTScore),
MAE = MAE(y_pred, test $ ACTScore))
model.lm$coefficients
model.lm = lm(ACTScore ~ WindSpeed + Humidity + Gender + OutdoorJob + Pressure + UVIndex, data = train)
summary(model.lm)
model.lm = lm(ACTScore ~ WindSpeed + Humidity + Gender + OutdoorJob + Pressure + UVIndex, data = train)
summary(model.lm)
summary(model.lm)$sigma
train[105,]
train[119,]
test[105,]
test[119,]
test[189,]
test[281,]
